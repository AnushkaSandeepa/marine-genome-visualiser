# 1) Reinstall packages under this R so the manifest captures them
install.packages(c(
"shiny","leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr","jsonlite","shinyjs"
))
# 2) Regenerate manifest (updates the "platform" field to 4.4.3)
install.packages("rsconnect")
# 3) (Optional) check
jsonlite::fromJSON("manifest.json")$platform
sessionInfo()$R.version$version.string
install.packages(c(
"shiny","leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr","jsonlite"
))
install.packages("rsconnect")
jsonlite::fromJSON("manifest.json")$platform
sessionInfo()$R.version$version.string
install.packages("rsconnect")
jsonlite::fromJSON("manifest.json")$platform
sessionInfo()$R.version$version.string
install.packages(c(
"shiny","leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr","jsonlite"
))
install.packages("rsconnect")
jsonlite::fromJSON("manifest.json")$platform
usethis::use_package("shinyjs", type = "Imports")
# 0) Confirm you’re in the right folder
getwd()
list.files(pattern = "manifest\\.json$")
# 1) Read the file *as a file* (two equivalent ways)
m <- jsonlite::fromJSON(txt = file("manifest.json"))          # uses a file connection
m <- jsonlite::fromJSON(txt = file("C:/path/to/your/project/manifest.json"))
library(rsconnect)
rsconnect::writeManifest(appDir = ".", outputFile = "manifest.json")
# Use the project library managed by renv
renv::activate()
# Make sure the two key packages are installed in *this* project lib
install.packages(c("shinyjs","rsconnect"), repos = "https://cloud.r-project.org")
# Use the project library managed by renv
renv::activate()
# Make sure the two key packages are installed in *this* project lib
install.packages(c("shinyjs","rsconnect"), repos = "https://cloud.r-project.org")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
pkgs <- c("dplyr","purrr","tibble","lubridate","htmltools","readr","jsonlite","tidyr")
for (p in pkgs) if (p %in% loadedNamespaces()) try(detach(paste0("package:", p), unload=TRUE, character.only=TRUE), silent=TRUE)
unlink(file.path(.libPaths()[1], "00LOCK*"), recursive = TRUE, force = TRUE)
install.packages(c(
"leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr","jsonlite",
"tidyr","httr","reticulate","rsconnect"
), dependencies = TRUE)
install.packages("renv")
# From the app directory you will deploy
rsconnect::writeManifest(
appDir = ".",
appMode = "shiny",
appPrimaryDoc = "app.R",
verbose = TRUE
)
jsonlite::fromJSON("manifest.json")$platform
sessionInfo()$R.version$version.string
# 1) Make sure renv is installed
install.packages("renv")
# 2) Load the project and downgrade just renv to the version in renv.lock
renv::restore(packages = "renv")   # installs renv 1.0.7 into the project lib
# 1) Make sure renv is installed
install.packages("renv")
# 2) Load the project and downgrade just renv to the version in renv.lock
renv::restore(packages = "renv")   # installs renv 1.0.7 into the project lib
# 3) Restore the rest of the packages listed in renv.lock
renv::restore()                    # non-interactive; let it finish
# 4) Check everything is clean
renv::status()
install.packages(c(
"leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr",
"jsonlite","tidyr","httr","reticulate","rsconnect"
), dependencies = c("Depends","Imports"))
install.packages("BiocManager")
# from the app directory you will deploy
rsconnect::writeManifest(
appDir = ".",
appMode = "shiny",
appPrimaryDoc = "app.R",
verbose = TRUE
)
install.packages("renv")          # ensures renv is available
# If the project loaded with a different renv version, align to lockfile:
renv::restore(packages = "renv", prompt = FALSE)
# Now restore all packages to match the lockfile:
renv::restore(prompt = FALSE)
# Sanity check:
renv::status()
rsconnect::writeManifest(appDir=".", appMode="shiny", appPrimaryDoc="app.R", verbose=TRUE)
install.packages("renv"); library(renv)
# Record the renv version you’re actually using into the lockfile:
renv::record("renv@"+ as.character(packageVersion("renv")))
library(renv)
# remove only the project-local library (safe; global R libs untouched)
unlink("renv/library", recursive = TRUE, force = TRUE)
# Optional on Windows to reduce DLL lock issues:
Sys.setenv(RENV_CONFIG_INSTALL_STAGED = "FALSE")
renv::restore(prompt = FALSE)
renv::status()
rsconnect::writeManifest(appDir=".", appMode="shiny", appPrimaryDoc="app.R", verbose=TRUE)
# from the app directory you will deploy
rsconnect::writeManifest(
appDir = ".",
appMode = "shiny",
appPrimaryDoc = "app.R",
verbose = TRUE
)
# from the app directory you will deploy
rsconnect::writeManifest(
appDir = ".",
appMode = "shiny",
appPrimaryDoc = "app.R",
verbose = TRUE
)
install.packages(c(
"leaflet","leaflet.extras","robis","dplyr","purrr","lubridate",
"DT","scales","memoise","tibble","stringr","htmltools","readr",
"jsonlite","tidyr","httr","reticulate","rsconnect"
), dependencies = c("Depends","Imports"))
# from the app directory you will deploy
rsconnect::writeManifest(
appDir = ".",
appMode = "shiny",
appPrimaryDoc = "app.R",
verbose = TRUE
)
# then:
# rsconnect::deployApp(".", appName = "marine-genome-visualiser")
jsonlite::fromJSON("manifest.json")$platform
sessionInfo()$R.version$version.string
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
